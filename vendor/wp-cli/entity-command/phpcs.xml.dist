<?xml version="1.0"?>
<ruleset name="WP-CLI-entity">
	<description>Custom ruleset for WP-CLI entity-command</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	For help understanding this file: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	For help using PHPCS: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage
	#############################################################################
	-->

	<!-- What to scan. -->
	<file>.</file>

	<!-- Show progress. -->
	<arg value="p"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="8"/>

	<!--
	#############################################################################
	USE THE WP_CLI_CS RULESET
	#############################################################################
	-->

	<rule ref="WP_CLI_CS"/>

	<!--
	#############################################################################
	PROJECT SPECIFIC CONFIGURATION FOR SNIFFS
	#############################################################################
	-->

	<!-- For help understanding the `testVersion` configuration setting:
		 https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions -->
	<config name="testVersion" value="5.6-"/>

	<!-- Verify that everything in the global namespace is either namespaced or prefixed.
		 See: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#naming-conventions-prefix-everything-in-the-global-namespace -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="WP_CLI\Entity"/><!-- Namespaces. -->
				<element value="wpcli_entity"/><!-- Global variables and such. -->
			</property>
		</properties>
	</rule>

	<!-- Exclude existing classes from the prefix rule as it would break BC to prefix them now. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedNamespaceFound">
		<exclude-pattern>*/src/WP_CLI/Fetchers/(Comment|Post|Site|User)\.php$</exclude-pattern>
		<exclude-pattern>*/src/WP_CLI/CommandWith(DBObject|Meta|Terms)\.php$</exclude-pattern>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedClassFound">
		<exclude-pattern>*/src/Taxonomy_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Comment(_Meta)?_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Menu(_Item|_Location)?_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Network_Meta_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Network_Namespace\.php$</exclude-pattern>
		<exclude-pattern>*/src/Option_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Post(_Meta|_Term|_Type)?_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Site(_Meta|_Option)?_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/Term(_Meta)?_Command\.php$</exclude-pattern>
		<exclude-pattern>*/src/User(_Meta|_Session|_Term)?_Command\.php$</exclude-pattern>
	</rule>

	<!-- Whitelisting to provide backward compatibility to classes possibly extending this class. -->
	<rule ref="PSR2.Methods.MethodDeclaration.Underscore">
		<exclude-pattern>*/src/WP_CLI/CommandWithDBObject\.php$</exclude-pattern>
	</rule>

</ruleset>
