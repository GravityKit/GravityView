<?php
/**
 * Generate an `autoload.php` and `classmap.php` file in the root of the target directory.
 *
 * @see \Composer\Autoload\ClassMapGenerator
 */

namespace BrianHenryIE\Strauss;

use BrianHenryIE\Strauss\Composer\Extra\StraussConfig;
use Composer\Autoload\ClassMapGenerator;
use League\Flysystem\Adapter\Local;
use League\Flysystem\Filesystem;

class Classmap
{

    /** @var Filesystem */
    protected $filesystem;

    protected string $workingDir;

    protected StraussConfig $config;

    public function __construct(StraussConfig $config, string $workingDir)
    {
        $this->config = $config;
        $this->workingDir = $workingDir;
        $this->filesystem = new Filesystem(new Local($workingDir));
    }

    public function generate()
    {

        if (! $this->config->isClassmapOutput()) {
            return;
        }

        // TODO Don't do this if vendor is the target dir (i.e. in-situ updating).

        $this->generateClassmap();

        $this->generateAutoloadPhp();
    }

    /**
     * Write a classmap to file iun each of the classmap_directory and dep_directory.
     *
     * Uses Composer's `ClassMapGenerator::createMap()` to scan the directories for classes and generate the map.
     *
     * createMap() returns the full local path, so we then replace the root of the path with a variable.
     *
     * @see ClassMapGenerator::dump()
     *
     */
    protected function generateClassmap(): string
    {

        // Hyphen used to match WordPress Coding Standards.
        $output_filename = "autoload-classmap.php";

        $targetDirectory = getcwd()
            . DIRECTORY_SEPARATOR
            . ltrim($this->config->getTargetDirectory(), DIRECTORY_SEPARATOR);

        $dirs = array(
            $targetDirectory
        );

        $dirname = '';

        foreach ($dirs as $dir) {
            if (!is_dir($dir)) {
                continue;
            }

            $dirMap = ClassMapGenerator::createMap($dir);

            $dirname = preg_replace('/[^a-z]/i', '', str_replace(getcwd(), '', $dir));

            array_walk(
                $dirMap,
                function (&$filepath, $_class) use ($dir, $dirname) {
                    $filepath = "\${$dirname} . '"
                        . DIRECTORY_SEPARATOR
                        . ltrim(str_replace($dir, '', $filepath), DIRECTORY_SEPARATOR) . "'";
                }
            );

            ob_start();

            echo "<?php\n\n";
            echo "// {$output_filename} @generated by Strauss\n\n";
            echo "\${$dirname} = dirname(__FILE__);\n\n";
            echo "return array(\n";
            foreach ($dirMap as $class => $file) {
                echo "   '{$class}' => {$file},\n";
            }
            echo ");";

            file_put_contents($dir . $output_filename, ob_get_clean());
        }

        return $dirname;
    }

    protected function generateAutoloadPhp()
    {

        $autoloadPhp = <<<'EOD'
<?php
// autoload.php @generated by Strauss

if ( file_exists( __DIR__ . '/autoload-classmap.php' ) ) {
    $class_map = include __DIR__ . '/autoload-classmap.php';
    if ( is_array( $class_map ) ) {
        spl_autoload_register(
            function ( $classname ) use ( $class_map ) {
                if ( isset( $class_map[ $classname ] ) && file_exists( $class_map[ $classname ] ) ) {
                    require_once $class_map[ $classname ];
                }
            }
        );
    }
    unset( $class_map );
}
EOD;

        $relativeFilepath = $this->config->getTargetDirectory() . 'autoload.php';
        $absoluteFilepath = $this->workingDir . $relativeFilepath;

        file_put_contents($absoluteFilepath, $autoloadPhp);
    }
}
