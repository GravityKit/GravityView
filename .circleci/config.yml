version: 2.2
setup: true

# Environment variables for YAML references
env:
    PLUGIN_BASE_DIR: &plugin_base_dir /home/circleci/plugin
    TOOLING_DIR: &tooling_dir /home/circleci/tooling

anchors:
    context: &context
        context: shared

    default_job_config: &default_job_config
        working_directory: /home/circleci/plugin
        machine:
            image: default
        resource_class: large

    test_job_config: &test_job_config
        <<: *context
        requires:
            - prepare_test_and_build_environment

    composer_cache_keys: &composer_cache_keys
        keys:
            - v2-composer-{{ checksum "composer.lock" }}
            - v2-composer-

    npm_cache_keys: &npm_cache_keys
        keys:
            - v2-npm-{{ checksum "package-lock.json" }}
            - v2-npm-

    tooling_cache_keys: &tooling_cache_keys
        keys:
            - tooling-cache-{{ .Branch }}
            - tooling-cache-

jobs:
    prepare_test_and_build_environment:
        <<: *default_job_config
        resource_class: medium
        steps:
            - checkout
            - run:
                  name: Verify lock files
                  command: |
                      set -eo pipefail
                      if [[ ! -f composer.lock ]]; then
                          echo "composer.lock missing"
                          exit 1
                      fi
                      if [[ ! -f package-lock.json ]]; then
                          echo "package-lock.json missing"
                          exit 1
                      fi
                      echo "Lock files verified successfully"
            # Restore all caches separately
            - restore_cache:
                  <<: *composer_cache_keys
            - restore_cache:
                  <<: *npm_cache_keys
            - restore_cache:
                  <<: *tooling_cache_keys
            # Clone tooling if not cached
            - run:
                  name: Getting GV test/build tools
                  command: |
                      set -eo pipefail
                      echo "Checking for cached tooling..."
                      if [[ ! -d "/home/circleci/tooling" ]]; then
                          echo "Cache MISS - Tooling not found, cloning fresh copy..."
                          git clone --depth 1 https://github.com/gravityview/Tooling.git /home/circleci/tooling
                      else
                          echo "Cache HIT - Using cached tooling directory"
                      fi
                  no_output_timeout: 5m
            # Dependency check
            -   run:
                    name: Install dependencies
                    command: |
                      /home/circleci/tooling/build-tools/build_tools.sh composer -o install
                      /home/circleci/tooling/build-tools/build_tools.sh npm -o install
                    no_output_timeout: 10m
            - run:
                    name: Configuring tests environment
                    command: |
                      /home/circleci/tooling/docker-unit-tests/docker-unit-tests.sh prepare_all
                    no_output_timeout: 10m
            # Save caches separately
            - save_cache:
                  key: v2-composer-{{ checksum "composer.lock" }}
                  paths:
                      - vendor
            - save_cache:
                  key: v2-npm-{{ checksum "package-lock.json" }}
                  paths:
                      - node_modules
            - save_cache:
                  key: tooling-cache-{{ .Branch }}
                  paths:
                      - /home/circleci/tooling
            # Persist workspace - optimized
            - persist_to_workspace:
                  root: /home/circleci
                  paths:
                      - plugin
                      - plugin/vendor
                      - plugin/vendor_prefixed
                      - tooling
                      - gravityforms
                      - wordpress-latest-tests-lib
                      - phpunit

    run_php_74_unit_tests:
        <<: *default_job_config
        parallelism: 8
        steps:
            - attach_workspace:
                  at: /home/circleci
            - run:
                  name: Verify workspace
                  command: |
                      set -eo pipefail
                      if [[ ! -d "/home/circleci/plugin" ]]; then
                          echo "Workspace not properly attached"
                          exit 1
                      fi
                      if [[ ! -d "/home/circleci/tooling" ]]; then
                          echo "Tooling directory not found"
                          exit 1
                      fi
                      echo "Workspace verified successfully"
            - run:
                  name: Running PHP 7.4 unit tests
                  command: |
                      set -eo pipefail
                      TESTFILES=$(circleci tests glob "tests/unit/**/*Test.php" | circleci tests split --split-by=timings)
                      /home/circleci/tooling/docker-unit-tests/docker-unit-tests.sh test_74 $TESTFILES
                  no_output_timeout: 20m
            - store_test_results:
                  path: tests/_output
            - store_artifacts:
                  path: tests/_output
                  destination: php74-test-results
            - persist_to_workspace:
                  root: /home/circleci
                  paths:
                      - plugin/tests/_output

    run_php_80_unit_tests:
        <<: *default_job_config
        parallelism: 8
        resource_class: xlarge
        steps:
            - attach_workspace:
                  at: /home/circleci
            - run:
                  name: Verify workspace
                  command: |
                      set -eo pipefail
                      if [[ ! -d "/home/circleci/plugin" ]]; then
                          echo "Workspace not properly attached"
                          exit 1
                      fi
                      if [[ ! -d "/home/circleci/tooling" ]]; then
                          echo "Tooling directory not found"
                          exit 1
                      fi
                      echo "Workspace verified successfully"
            - run:
                  name: Running PHP 8.0 unit tests
                  command: |
                      set -eo pipefail
                      TESTFILES=$(circleci tests glob "tests/unit/**/*Test.php" | circleci tests split --split-by=timings)
                      /home/circleci/tooling/docker-unit-tests/docker-unit-tests.sh test_80 $TESTFILES
                  no_output_timeout: 20m
            - store_test_results:
                  path: tests/_output
            - store_artifacts:
                  path: tests/_output
                  destination: php80-test-results
            - persist_to_workspace:
                  root: /home/circleci
                  paths:
                      - plugin/tests/_output

    run_acceptance_tests:
        <<: *default_job_config
        steps:
            - checkout
            - run:
                  name: Setting up virtual host
                  command: echo "127.0.0.1 wordpress" | sudo tee -a /etc/hosts
            - run:
                  name: Run acceptance tests
                  command: |
                      PLUGIN_DIR=$PLUGIN_DIR docker-compose -f tests/acceptance/docker/docker-compose.yml \
                          run codeception --debug -vvv --html --xml
                  no_output_timeout: 30m
            - store_artifacts:
                  path: tests/acceptance/_output
                  destination: acceptance-test-results
            - store_test_results:
                  path: tests/acceptance/_output

    build_package_release:
        <<: *default_job_config
        resource_class: medium
        steps:
            - attach_workspace:
                  at: /home/circleci
            - restore_cache:
                  <<: *composer_cache_keys
            - restore_cache:
                  <<: *npm_cache_keys
            - run:
                  name: Building and packaging
                  command: |
                      set -eo pipefail
                      # Run Composer first to ensure dependencies are in place
                      echo "Installing PHP dependencies..."
                      /home/circleci/tooling/build-tools/build_tools.sh composer -o "install --no-dev --prefer-dist --optimize-autoloader --no-progress"

                      echo "Running Grunt tasks..."
                      /home/circleci/tooling/build-tools/build_tools.sh grunt

                      # Determine package build options
                      BUILD_OPTS="gravityview gravityview.php"
                      [[ "${CIRCLE_BRANCH}" != "main" ]] && BUILD_OPTS+=" --include-hash"
                      [[ $(git log -n 1 | grep "\[skip release\]") ]] && BUILD_OPTS+=" --include-hash"

                      # Build package
                      /home/circleci/tooling/build-tools/build_tools.sh package_build -o "${BUILD_OPTS}"

                      # Prepare release files
                      mkdir -p gravityview && cp -R vendor* gravityview || exit 1
                      rm -f gravityview/vendor_prefixed/gravitykit/foundation/src/translations.js.php

                      # Create ZIP file with moderate compression for good size/speed balance
                      zip -3gr $(ls gravityview-*.zip) gravityview || exit 1
                      mkdir -p .release
                      cp gravityview-*.zip .release/
                  no_output_timeout: 30m
            - save_cache:
                  key: build-cache-{{ checksum "composer.lock" }}-{{ checksum "package-lock.json" }}
                  paths:
                      - gravityview
                      - .release
            - run:
                  name: Creating a GitHub release
                  when: on_success
                  command: |
                      set -eo pipefail
                      if [ "${CIRCLE_BRANCH}" == "main" ]; then
                          git config user.email "support@gravitykit.com"
                          git config user.name "GravityView - CI"
                          /home/circleci/tooling/build-tools/build_tools.sh create_release -o "gravityview.php $(ls gravityview-*.zip)" || {
                              echo "Failed to create GitHub release"
                              exit 1
                          }
                      fi
                  no_output_timeout: 10m
            - run:
                  name: Notifying GravityView Release Manager
                  when: on_success
                  command: |
                      set -eo pipefail
                      if ! [[ $(git log -n 1 | grep "\[skip notify\]") ]]; then
                          /home/circleci/tooling/build-tools/build_tools.sh announce_build -o "gravityview.php $(ls gravityview-*.zip) --with-circle" || {
                              echo "Failed to notify Release Manager"
                              exit 1
                          }
                      fi
                  no_output_timeout: 5m
            - store_artifacts:
                  path: .release
                  destination: release

workflows:
    version: 2
    test_and_package:
        jobs:
            - prepare_test_and_build_environment:
                  <<: *context
            - run_php_74_unit_tests:
                  <<: *test_job_config
            - run_php_80_unit_tests:
                  <<: *test_job_config
            # Acceptance tests are currently disabled
            # TODO: Re-enable when test stability issues are resolved
            #- run_acceptance_tests:
            #    <<: *context
            #    requires:
            #      - prepare_test_and_build_environment
            - build_package_release:
                  <<: *context
                  requires:
                      - run_php_74_unit_tests
                      - run_php_80_unit_tests
                      #- run_acceptance_tests
